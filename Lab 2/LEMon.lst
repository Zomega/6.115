                   ;   *************************************************
                   ;   *                                               *
                   ;   *  MINMON - The Minimal 8051 Monitor Program    *
                   ;   *                                               *
                   ;   *  Portions of this program are courtesy of     *
                   ;   *  Rigel Corporation, of Gainesville, Florida   *
                   ;   *                                               *
                   ;   *  Modified for 6.115                           *   
                   ;   *  Massachusetts Institute of Technology        *
                   ;   *  January, 2001  Steven B. Leeb                *
                   ;   *                                               *
                   ;   *************************************************
0000:              .equ stack, 2fh           ; bottom of stack
                                             ; - stack starts at 30h -
0000:              .equ errorf, 0            ; bit 0 is error status
                   ;===========================================================
                   ; 8032 hardware vectors
                   ;===========================================================
0000:                 .org 00h               ; power up and reset vector
0000: 02 02 00        ljmp start
0003:                 .org 03h               ; interrupt 0 vector
0003: 02 02 00        ljmp start
000B:                 .org 0bh               ; timer 0 interrupt vector
000B: 02 02 00        ljmp start
0013:                 .org 13h               ; interrupt 1 vector
0013: 02 02 00        ljmp start
001B:                 .org 1bh               ; timer 1 interrupt vector
001B: 02 02 00        ljmp start
0023:                 .org 23h               ; serial port interrupt vector
0023: 02 02 00        ljmp start
002B:                 .org 2bh               ; 8052 extra interrupt vector
002B: 02 02 00        ljmp start
                   
                   ;===========================================================
                   ; string space.
                   ;===========================================================
                   
002E: 0A 0D 57 65 
      6C 63 6F 6D 
      65 20 74 6F 
      20 4C 45 4D 
      6F 6E 20 56 
      30 2E 31 0A 
      0D 54 79 70 
      65 20 27 68 
      65 6C 70 27 
      20 66 6F 72 
      20 61 20 6C 
      69 73 74 20 
      6F 66 20 63 
      6F 6D 6D 61 
      6E 64 73 2E 
      0A 0D 00     welcome_string:          .db 0ah, 0dh, "Welcome to LEMon V0.
006D: 4C 45 4D 6F 
      6E 24 00 2E 
      2E 2E 2E 2E 
      2E 2E 2E 2E 
      2E 2E 2E 2E 
      2E 2E        prompt_string:           .db "LEMon$", 0h, "..............."
                   
0083: 74 72 61 6E 
      73 66 65 72 
      00           transfer_string:         .db "transfer", 0h
008C: 67 6F 74 6F 
      00           goto_string:             .db "goto", 0h
0091: 72 65 61 64 
      00           read_string:             .db "read", 0h
0096: 77 72 69 74 
      65 00        write_string:            .db "write", 0h
009C: 72 75 6E 00 
                   run_string:              .db "run", 0h
00A0: 68 65 6C 70 
      00           help_string:             .db "help", 0h
                   
00A5: 0A 0D 50 41 
      4E 49 43 3A 
      20 00        panic_string:            .db 0ah, 0dh, "PANIC: ", 0h
00AF: 0A 0D 45 52 
      52 4F 52 3A 
      20 00        error_string:            .db 0ah, 0dh, "ERROR: ", 0h
00B9: 0A 0D 57 41 
      52 4E 49 4E 
      47 3A 20 00 
                   warn_string:             .db 0ah, 0dh, "WARNING: ", 0h
                   
                   ;===========================================================
                   ; string space.
                   ;===========================================================
                   panic:
00C5: 90 00 A5              mov dptr, #panic_string
00C8: C0 82                 push dpl
00CA: C0 83                 push dph
00CC: 12 03 F2              lcall string_print
00CF: D0 F0                 pop b
00D1: D0 F0                 pop b
                   
                            ; Because panic does not return, we can
                            ; screw up the stack without compunction.
                            ; Expose the passed char* and print it out.
                   
00D3: D0 F0                 pop b
00D5: D0 F0                 pop b
00D7: 12 03 F2              lcall string_print
                   
00DA: 80 FE                 panic_loop: sjmp panic_loop ; Hang here to avoid fu
                   
                   
                   ;===========================================================
                   ; begin main program
                   ;===========================================================
0200:                 .org     200h
                   start:
0200: C2 AF                 clr     ea             ; disable interrupts
0202: 12 02 33              lcall   init           ; initialize hardware
                   
                            ;mov dptr, #test_panic_string
                            ;push dpl
                            ;push dph
                            ;lcall panic
                            ;test_panic_string: .db "TESTING TESTING 123, this 
                   
0205: 90 00 2E              mov dptr, #welcome_string
0208: C0 82                 push dpl
020A: C0 83                 push dph
020C: 12 03 F2              lcall string_print
020F: D0 F0                 pop b
0211: D0 F0                 pop b
                   
                   monloop:
0213: 75 81 2F              mov     sp,#stack      ; reinitialize stack pointer
0216: C2 AF                 clr     ea             ; disable all interrupts
0218: C2 00                 clr     errorf         ; clear the error flag
021A: 90 00 6D              mov dptr, #prompt_string
021D: C0 82                 push dpl
021F: C0 83                 push dph
0221: 12 03 F2              lcall string_print
0224: D0 F0                 pop b
0226: D0 F0                 pop b
0228: C2 98                 clr     ri             ; flush the serial input buf
022A: 12 03 BB              lcall   getcmd         ; read the single-letter com
022D: FA                    mov     r2, a          ; put the command number in 
022E: 02 03 D7              ljmp    nway           ; branch to a monitor routin
                   endloop:                  ; come here after command has fini
0231: 80 E0                 sjmp monloop           ; loop forever in monitor lo
                   
                   ;some strings
                   ;===========================================================
                   ; subroutine init
                   ; this routine initializes the hardware
                   ; set up serial port with a 11.0592 MHz crystal,
                   ; use timer 1 for 9600 baud serial communications
                   ;===========================================================
                   init:
0233: 75 89 20        mov   tmod, #20h       ; set timer 1 for auto reload - mo
0236: 75 88 41        mov   tcon, #41h       ; run counter 1 and set edge trig 
0239: 75 8D FD        mov   th1,  #0fdh      ; set 9600 baud with xtal=11.059mh
023C: 75 98 50        mov   scon, #50h       ; set serial control reg for 8 bit
                                             ; and mode 1
023F: 22              ret
                   ;===========================================================
                   ; MinMon monitor jump table
                   ;===========================================================
                   jumtab:
0240: 03 3A           .dw badcmd             ; command '@' 00
0242: 03 3A           .dw badcmd             ; command 'a' 01
0244: 03 3A           .dw badcmd             ; command 'b' 02
0246: 03 3A           .dw badcmd             ; command 'c' 03
0248: 02 E8           .dw downld             ; command 'd' 04 used
024A: 03 3A           .dw badcmd             ; command 'e' 05
024C: 03 3A           .dw badcmd             ; command 'f' 06
024E: 02 D2           .dw goaddr             ; command 'g' 07 used
0250: 03 3A           .dw badcmd             ; command 'h' 08
0252: 03 3A           .dw badcmd             ; command 'i' 09
0254: 03 3A           .dw badcmd             ; command 'j' 0a
0256: 03 3A           .dw badcmd             ; command 'k' 0b
0258: 03 3A           .dw badcmd             ; command 'l' 0c
025A: 03 3A           .dw badcmd             ; command 'm' 0d
025C: 03 3A           .dw badcmd             ; command 'n' 0e
025E: 03 3A           .dw badcmd             ; command 'o' 0f
0260: 03 3A           .dw badcmd             ; command 'p' 10
0262: 03 3A           .dw badcmd             ; command 'q' 11
0264: 02 92           .dw read_cmd           ; command 'r' 12
0266: 03 3A           .dw badcmd             ; command 's' 13
0268: 03 3A           .dw badcmd             ; command 't' 14
026A: 03 3A           .dw badcmd             ; command 'u' 15
026C: 03 3A           .dw badcmd             ; command 'v' 16
026E: 02 AC           .dw write_cmd          ; command 'w' 17
0270: 03 3A           .dw badcmd             ; command 'x' 18
0272: 03 3A           .dw badcmd             ; command 'y' 19
0274: 03 3A           .dw badcmd             ; command 'z' 1a
                   
                   ;===========================================================
                   ; LEMon built-in command table
                   ;===========================================================
                   command_table:
0276: 00 83 02 E8 
                            .dw transfer_string,    downld
027A: 00 8C 02 D2 
                            .dw goto_string,        goaddr
027E: 00 91 03 3A 
                            .dw read_string,        badcmd
0282: 00 96 03 3A 
                            .dw write_string,       badcmd
0286: 00 9C 03 3A 
                            .dw run_string,                 badcmd
028A: 00 A0 03 3A 
                            .dw help_string,        badcmd
028E: 00 00 00 00 
                            .dw 0,0
                   
                   ;***********************************************************
                   ; monitor command routines
                   ;***********************************************************
                   ;===========================================================
                   ; command read  'r'
                   ; Reads the memory address that follows. 
                   ;===========================================================
                   read_cmd:
0292: 12 03 B0              lcall getaddr
0295: 12 04 4E              lcall prtaddr
0298: 12 04 20              lcall print
029B: 0D 0A 00              .db 0dh, 0ah, 0h ; Output is on a new line.
                            ; Read the memory into acc and print it.
029E: E4                    clr a
029F: 93                    movc  a, @a+dptr
02A0: 12 04 3F              lcall prthex
02A3: 12 04 20              lcall print
02A6: 0D 0A 00              .db 0dh, 0ah, 0h
02A9: 02 02 31              ljmp endloop
                   ;===========================================================
                   ; command write 'w'
                   ; Writes to the memory address. 
                   ;===========================================================
                   write_cmd:
02AC: 12 03 B0              lcall getaddr
02AF: C0 83                 push dph
02B1: C0 82                 push dpl
02B3: 12 04 4E              lcall prtaddr
02B6: 12 04 20              lcall print
02B9: 3D 00                 .db "=", 0h
02BB: 12 03 9E              lcall getbyt
02BE: C0 E0                 push acc
02C0: 12 04 3F              lcall prthex
                            ;lcall print
                            ;.db 0dh, 0ah,"WRITE STUB", 0dh, 0ah, 0h
02C3: D0 E0                 pop acc
02C5: 12 04 3F              lcall prthex
02C8: D0 82                 pop dpl
02CA: D0 83                 pop dph
02CC: 12 04 4E              lcall prtaddr
02CF: 02 02 31              ljmp endloop
                   ;===========================================================
                   ; command goaddr  'g'
                   ; this routine branches to the 4 hex digit address which fol
                   ;===========================================================
                   goaddr:
02D2: 12 03 9E        lcall getbyt           ; get address high byte
02D5: FF              mov   r7, a            ; save in R7
02D6: 12 04 3F        lcall prthex
02D9: 12 03 9E        lcall getbyt           ; get address low byte
02DC: C0 E0           push  acc              ; push lsb of jump address
02DE: 12 04 3F        lcall prthex
02E1: 12 04 34        lcall crlf
02E4: EF              mov   a, r7            ; recall address high byte
02E5: C0 E0           push  acc              ; push msb of jump address
02E7: 22              ret                    ; do jump by doing a ret
                   ;===========================================================
                   ; command downld  'd'
                   ; this command reads in an Intel hex file from the serial po
                   ; and stores it in external memory.
                   ;===========================================================
                   downld:
02E8: 12 04 34        lcall crlf
02EB: 74 3E           mov   a, #'>'          ; acknowledge by a '>'
02ED: 12 04 0E        lcall sndchr
                   dl:
02F0: 12 04 16        lcall getchr           ; read in ':'
02F3: B4 3A FA        cjne  a,  #':', dl
02F6: 12 03 30        lcall getbytx          ; get hex length byte
02F9: 60 21           jz    enddl            ; if length=0 then return
02FB: F8              mov   r0, a            ; save length in r0
02FC: 12 03 30        lcall getbytx          ; get msb of address
02FF: D2 E7           setb  acc.7            ; make sure it is in RAM
0301: F5 83           mov   dph, a           ; save in dph
0303: 12 03 30        lcall getbytx          ; get lsb of address
0306: F5 82           mov   dpl, a           ; save in dpl
0308: 12 03 30        lcall getbytx          ; read in special purpose byte (ig
                   dloop:
030B: 12 03 30        lcall getbytx          ; read in data byte
030E: F0              movx  @dptr, a         ; save in ext mem
030F: A3              inc   dptr             ; bump mem pointer
0310: D8 F9           djnz  r0, dloop        ; repeat for all data bytes in rec
0312: 12 03 30        lcall getbytx          ; read in checksum
0315: 74 2E           mov   a,  #'.'
0317: 12 04 0E        lcall sndchr           ; handshake '.'
031A: 80 D4           sjmp  dl               ; read in next record
                   enddl:
031C: 12 03 30        lcall getbytx          ; read in remainder of the
031F: 12 03 30        lcall getbytx          ; termination record
0322: 12 03 30        lcall getbytx
0325: 12 03 30        lcall getbytx
0328: 74 2E           mov   a,  #'.'
032A: 12 04 0E        lcall sndchr           ; handshake '.'
032D: 02 02 31        ljmp  endloop          ; return
                   getbytx:
0330: 12 03 9E        lcall getbyt
0333: 20 00 01        jb    errorf, gb_err
0336: 22              ret
                   gb_err:
0337: 02 03 86        ljmp badpar
                   
                   ;***********************************************************
                   ; monitor support routines
                   ;***********************************************************
                   badcmd:
033A: 12 04 20        lcall print
033D: 0D 0A 45 52 
      52 4F 52 3A 
      20 55 6E 6B 
      6E 6F 77 6E 
      20 43 6F 6D 
      6D 61 6E 64 
      2E 20 54 79 
      70 65 20 27 
      68 65 6C 70 
      27 20 66 6F 
      72 20 61 20 
      6C 69 73 74 
      20 6F 66 20 
      76 61 6C 69 
      64 20 63 6F 
      6D 6D 61 6E 
      64 73 2E 0D 
      0A 00           .db 0dh, 0ah,"ERROR: Unknown Command. Type 'help' for a l
0383: 02 02 31        ljmp endloop
                   badpar:
0386: 12 04 20        lcall print
0389: 0D 0A 20 62 
      61 64 20 70 
      61 72 61 6D 
      65 74 65 72 
      20 00           .db 0dh, 0ah," bad parameter ", 0h
039B: 02 02 31        ljmp endloop
                   ;===========================================================
                   ; subroutine getbyt
                   ; this routine reads in an 2 digit ascii hex number from the
                   ; serial port. the result is returned in the acc.
                   ;===========================================================
                   getbyt:
039E: 12 04 16        lcall getchr           ; get msb ascii chr
03A1: 12 04 75        lcall ascbin           ; conv it to binary
03A4: C4              swap  a                ; move to most sig half of acc
03A5: F5 F0           mov   b,  a            ; save in b
03A7: 12 04 16        lcall getchr           ; get lsb ascii chr
03AA: 12 04 75        lcall ascbin           ; conv it to binary
03AD: 45 F0           orl   a,  b            ; combine two halves
03AF: 22              ret
                   ;===========================================================
                   ; subroutine getaddr
                   ; this routine reads in an 2 digit ascii hex number from the
                   ; serial port. the result is returned in dptr.
                   ;===========================================================
                   getaddr:
03B0: 12 03 9E        lcall getbyt
03B3: F5 83           mov dph, a
03B5: 12 03 9E        lcall getbyt
03B8: F5 82           mov dpl, a
03BA: 22              ret
                   ;===========================================================
                   ; subroutine getcmd
                   ; this routine gets the command line.  currently only a
                   ; single-letter command is read - all command line parameter
                   ; must be parsed by the individual routines.
                   ;
                   ;===========================================================
                   getcmd:
03BB: 12 04 16        lcall getchr           ; get the single-letter command
03BE: C2 E5           clr   acc.5            ; make upper case
03C0: 12 04 0E        lcall sndchr           ; echo command
03C3: C3              clr   C                ; clear the carry flag
03C4: 94 40           subb  a, #'@'          ; convert to command number
03C6: 50 03           jnc   cmdok1           ; letter command must be above '@'
03C8: 12 03 86        lcall badpar
                   cmdok1:
03CB: C0 E0           push  acc              ; save command number
03CD: 94 1B           subb  a, #1Bh          ; command number must be 1Ah or le
03CF: 40 03           jc    cmdok2
03D1: 12 03 86        lcall badpar           ; no need to pop acc since badpar
                                             ; initializes the system
                   cmdok2:
03D4: D0 E0           pop   acc              ; recall command number
03D6: 22              ret
                   ;===========================================================
                   ; subroutine nway
                   ; this routine branches (jumps) to the appropriate monitor
                   ; routine. the routine number is in r2
                   ;===========================================================
                   nway:
03D7: 90 02 40        mov   dptr, #jumtab    ;point dptr at beginning of jump t
03DA: EA              mov   a, r2            ;load acc with monitor routine num
03DB: 23              rl    a                ;multiply by two.
03DC: 04              inc   a                ;load first vector onto stack
03DD: 93              movc  a, @a+dptr       ;         "          "
03DE: C0 E0           push  acc              ;         "          "
03E0: EA              mov   a, r2            ;load acc with monitor routine num
03E1: 23              rl    a                ;multiply by two
03E2: 93              movc  a, @a+dptr       ;load second vector onto stack
03E3: C0 E0           push  acc              ;         "          "
03E5: 22              ret                    ;jump to start of monitor routine
                   
                   ;***********************************************************
                   ; Stack Management
                   ;***********************************************************
                   
                   check_sp:
03E6: 22                    ret ; TODO: Implement checking sp relative to some 
                   
                   ;===========================================================
                   ; Subroutine to enable C-style stack management
                   ; When called, a should contain the offset, zero indexed.
                   ; Args should be pushed in reverse order, so the first arg i
                   ; offset 0, second 1, etc.
                   ;===========================================================
                   
                   arg:
                            ; offset is in a.
03E7: F8                    mov R0, a
03E8: E5 81                 mov a, sp       ; move the stack pointer into the a
03EA: 94 04                 subb a, #004d   ; hop over the stack frame of arg a
03EC: 98                    subb a, R0      ; subtract the offset.
03ED: F8                    mov R0, a       ; move the address we need to load 
03EE: E6                    mov a, @R0      ; load the value...
03EF: 22                    ret
                   
                   stow:
03F0: 22                    ret ; TODO
                   
                   unstow:
03F1: 22                    ret ; TODO
                   
                   ;***********************************************************
                   ; Char Subroutines
                   ;***********************************************************
                   
                   ;***********************************************************
                   ; String Subroutines
                   ;***********************************************************
                   
                   ;===========================================================
                   ; string_print( char* msg )
                   ;
                   ; Will call char_print many times to print a string to the
                   ; serial connection.
                   ;===========================================================
                   string_print:
                   
03F2: 74 00                 mov a, #0h ; Put the passed char* in dptr
03F4: 12 03 E7              lcall arg
03F7: F5 83                 mov dph, a
03F9: 74 01                 mov a, #1h
03FB: 12 03 E7              lcall arg
03FE: F5 82                 mov dpl, a
                   
                            string_print_prtstr:
0400: E4                            clr a
0401: 93                            movc a,  @dptr+a       ; get chr from code 
0402: B4 00 02                      cjne a,  #0h, string_print_mchrok   ; if te
0405: 80 06                         sjmp string_print_prtdone
                            string_print_mchrok:
0407: 12 04 0E                      lcall sndchr           ; send character TOD
040A: A3                            inc   dptr             ; point at next char
040B: 80 F3                         sjmp  string_print_prtstr           ; loop 
                            string_print_prtdone:
040D: 22                            ret
                   
                   ;***********************************************************
                   ; general purpose routines
                   ;***********************************************************
                   
                   ;===========================================================
                   ; subroutine sndchr
                   ; this routine takes the chr in the acc and sends it out the
                   ; serial port.
                   ;===========================================================
                   
                   sndchr:
040E: C2 99           clr  scon.1            ; clear the tx  buffer full flag.
0410: F5 99           mov  sbuf,a            ; put chr in sbuf
                   txloop:
0412: 30 99 FD        jnb  scon.1, txloop    ; wait till chr is sent
0415: 22              ret
                   
                   ;===========================================================
                   ; subroutine getchr
                   ; this routine reads in a chr from the serial port and saves
                   ; in the accumulator.
                   ;===========================================================
                   
                   getchr:
0416: 30 98 FD        jnb  ri, getchr        ; wait till character received
0419: E5 99           mov  a,  sbuf          ; get character
041B: 54 7F           anl  a,  #7fh          ; mask off 8th bit
041D: C2 98           clr  ri                ; clear serial status bit
041F: 22              ret
                   
                   ;===========================================================
                   ; subroutine print
                   ; print takes the string immediately following the call and
                   ; sends it out the serial port.  the string must be terminat
                   ; with a null. this routine will ret to the instruction
                   ; immediately following the string.
                   ;===========================================================
                   
                   print: ; TODO: Rewrite using strings for conveinece.
0420: D0 83           pop   dph              ; put return address in dptr
0422: D0 82           pop   dpl
                   prtstr:
0424: E4              clr  a                 ; set offset = 0
0425: 93              movc a,  @a+dptr       ; get chr from code memory
0426: B4 00 02        cjne a,  #0h, mchrok   ; if termination chr, then return
0429: 80 06           sjmp prtdone
                   mchrok:
042B: 12 04 0E        lcall sndchr           ; send character
042E: A3              inc   dptr             ; point at next character
042F: 80 F3           sjmp  prtstr           ; loop till end of string
                   prtdone:
0431: 74 01           mov   a,  #1h          ; point to instruction after strin
0433: 73              jmp   @a+dptr          ; return
                   ;===========================================================
                   ; subroutine crlf
                   ; crlf sends a carriage return line feed out the serial port
                   ;===========================================================
                   crlf:
0434: 74 0A           mov   a,  #0ah         ; print lf
0436: 12 04 0E        lcall sndchr
                   cret:
0439: 74 0D           mov   a,  #0dh         ; print cr
043B: 12 04 0E        lcall sndchr
043E: 22              ret
                   ;===========================================================
                   ; subroutine prthex
                   ; this routine takes the contents of the acc and prints it o
                   ; as a 2 digit ascii hex number.
                   ;===========================================================
                   prthex:
043F: C0 E0           push acc
0441: 12 04 5D        lcall binasc           ; convert acc to ascii
0444: 12 04 0E        lcall sndchr           ; print first ascii hex digit
0447: EA              mov   a,  r2           ; get second ascii hex digit
0448: 12 04 0E        lcall sndchr           ; print it
044B: D0 E0           pop acc
044D: 22              ret
                   
                   prtaddr:
044E: C0 E0                 push acc
0450: E5 83                 mov a, dph
0452: 12 04 3F              lcall prthex
0455: E5 82                 mov a, dpl
0457: 12 04 3F              lcall prthex
045A: D0 E0                 pop acc
045C: 22                    ret
                   ;===========================================================
                   ; subroutine binasc
                   ; binasc takes the contents of the accumulator and converts 
                   ; into two ascii hex numbers.  the result is returned in the
                   ; accumulator and r2.
                   ;===========================================================
                   binasc:
045D: FA              mov   r2, a            ; save in r2
045E: 54 0F           anl   a,  #0fh         ; convert least sig digit.
0460: 24 F6           add   a,  #0f6h        ; adjust it
0462: 50 02           jnc   noadj1           ; if a-f then readjust
0464: 24 07           add   a,  #07h
                   noadj1:
0466: 24 3A           add   a,  #3ah         ; make ascii
0468: CA              xch   a,  r2           ; put result in reg 2
0469: C4              swap  a                ; convert most sig digit
046A: 54 0F           anl   a,  #0fh         ; look at least sig half of acc
046C: 24 F6           add   a,  #0f6h        ; adjust it
046E: 50 02           jnc   noadj2           ; if a-f then re-adjust
0470: 24 07           add   a,  #07h
                   noadj2:
0472: 24 3A           add   a,  #3ah         ; make ascii
0474: 22              ret
                   
                   ;===========================================================
                   ; subroutine ascbin
                   ; this routine takes the ascii character passed to it in the
                   ; acc and converts it to a 4 bit binary number which is retu
                   ; in the acc.
                   ;===========================================================
                   ascbin:
0475: C2 00           clr   errorf
0477: 24 D0           add   a,  #0d0h        ; if chr < 30 then error
0479: 50 17           jnc   notnum
047B: C3              clr   c                ; check if chr is 0-9
047C: 24 F6           add   a,  #0f6h        ; adjust it
047E: 40 03           jc    hextry           ; jmp if chr not 0-9
0480: 24 0A           add   a,  #0ah         ; if it is then adjust it
0482: 22              ret
                   hextry:
0483: C2 E5           clr   acc.5            ; convert to upper
0485: C3              clr   c                ; check if chr is a-f
0486: 24 F9           add   a,  #0f9h        ; adjust it
0488: 50 08           jnc   notnum           ; if not a-f then error
048A: C3              clr   c                ; see if char is 46 or less.
048B: 24 FA           add   a,  #0fah        ; adjust acc
048D: 40 03           jc    notnum           ; if carry then not hex
048F: 54 0F           anl   a,  #0fh         ; clear unused bits
0491: 22              ret
                   notnum:
0492: D2 00           setb  errorf           ; if not a valid digit
0494: 02 02 31        ljmp  endloop
                   
                   
                   ;===========================================================
                   ; mon_return is not a subroutine.  
                   ; it simply jumps to address 0 which resets the system and 
                   ; invokes the monitor program.
                   ; A jump or a call to mon_return has the same effect since 
                   ; the monitor initializes the stack.
                   ;===========================================================
                   mon_return:
0497: 02 00 00        ljmp  0
                   ; end of MINMON
